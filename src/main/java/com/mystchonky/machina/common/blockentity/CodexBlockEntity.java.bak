package com.mystchonky.machina.common.blockentity;

import com.mystchonky.machina.common.recipe.GearRecipe;
import com.mystchonky.machina.common.registrar.BlockEntityRegistrar;
import net.minecraft.ChatFormatting;
import net.minecraft.core.BlockPos;
import net.minecraft.core.HolderLookup;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.util.Mth;
import net.minecraft.util.RandomSource;
import net.minecraft.world.entity.item.ItemEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.item.crafting.RecipeHolder;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.phys.AABB;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;

public class CodexBlockEntity extends BlockEntity implements TickingBlockEntity {
    public int time;
    public float flip;
    public float oFlip;
    public float flipT;
    public float flipA;
    public float open;
    public float oOpen;
    private static final RandomSource RANDOM = RandomSource.create();

    @Nullable
    private RecipeHolder<GearRecipe> recipe;
    private List<ItemStack> consumedStacks = new ArrayList<>();
    public boolean crafting;
    public int craftingTicks;

    public CodexBlockEntity(BlockPos pos, BlockState blockState) {
        super(BlockEntityRegistrar.CODEX.get(), pos, blockState);
    }

    @Override
    public void tick(Level level, BlockPos pos, BlockState state) {
        if (level.isClientSide()) {
            // client-side animation
            this.oOpen = this.open;
            Player player = level.getNearestPlayer((double) pos.getX() + 0.5, (double) pos.getY() + 0.5, (double) pos.getZ() + 0.5, 3.0, false);
            if (player != null) {
                this.open += 0.1F;
                if (this.open < 0.5F || RANDOM.nextInt(40) == 0) {
                    float f1 = this.flipT;

                    do {
                        this.flipT = this.flipT + (float) (RANDOM.nextInt(4) - RANDOM.nextInt(4));
                    } while (f1 == this.flipT);
                }
            } else {
                this.open -= 0.1F;
            }

            this.open = Mth.clamp(this.open, 0.0F, 1.2F);
            this.time++;
            this.oFlip = this.flip;
            float f = (this.flipT - this.flip) * 0.4F;
            f = Mth.clamp(f, -0.2F, 0.2F);
            this.flipA = this.flipA + (f - this.flipA) * 0.9F;
            this.flip = this.flip + this.flipA;

        }

        if (recipe == null)
            return;

        if (craftingTicks > 0)
            craftingTicks--;

        if (level.getGameTime() % 5 == 0) {
            boolean foundStack = false;
            List<ItemEntity> nearbyItems = level.getEntitiesOfClass(ItemEntity.class, new AABB(getBlockPos()).inflate(2));
            for (ItemEntity e : nearbyItems) {
                if (canConsumeStack(e.getItem())) {
                    ItemStack copyStack = e.getItem().copy();
                    copyStack.setCount(1);
                    consumedStacks.add(copyStack);
                    e.getItem().shrink(1);
                    setChanged();
                    foundStack = true;
                    break;
                }
            }

//            if (!foundStack && level.getGameTime() % 20 == 0) {
//                takeNearby();
//            }

            if (getRemainingRequired().isEmpty() && !crafting) {
                crafting = true;
                craftingTicks = 120;
//                Networking.sendToNearbyClient(level, getBlockPos(), new PacketOneShotAnimation(getBlockPos(), 0));
                setChanged();
            }
        }

    }

    public void setRecipe(RecipeHolder<GearRecipe> holder, Player player) {
        refundConsumed();
        recipe = holder;
        player.sendSystemMessage(Component.translatable("ars_nouveau.scribes_table.started_crafting").withStyle(ChatFormatting.GOLD));
        setChanged();
    }

    public void refundConsumed() {
        for (ItemStack i : consumedStacks) {
            ItemEntity entity = new ItemEntity(level, worldPosition.getX(), worldPosition.getY(), worldPosition.getZ(), i);
            level.addFreshEntity(entity);
            consumedStacks = new ArrayList<>();
        }

        recipe = null;
        craftingTicks = 0;
        crafting = false;
        setChanged();
    }

    public boolean canConsumeStack(ItemStack stack) {
        if (recipe == null)
            return false;
        return getRemainingRequired().stream().anyMatch(i -> i.test(stack));
    }

    public List<Ingredient> getRemainingRequired() {
        var ingredients = recipe.value().ingredients();
        if (consumedStacks.isEmpty())
            return ingredients;

        var missing = new ArrayList<Ingredient>();
        var consumed = new ArrayList<>(consumedStacks);

        for (var ingredient : ingredients) {
            for (var stack : consumed) {
                if (ingredient.test(stack)) {
                    missing.add(ingredient);
                    consumed.remove(stack);
                    break;
                }
            }
        }

        return missing;
    }

//    public void takeNearby() {
//        for (BlockPos blockPos : BlockPos.betweenClosed(worldPosition.north(6).east(6).below(2), worldPosition.south(6).west(6).above(2))) {
//            var handler = level.getCapability(Capabilities.ItemHandler.BLOCK, blockPos, null);
//            if (handler != null) {
//                for (int i = 0; i < handler.getSlots(); i++) {
//                    ItemStack stack = handler.getStackInSlot(i);
//                    if (canConsumeStack(stack)) {
//                        ItemStack extracted = handler.extractItem(i, 1, false);
//                        consumedStacks.add(extracted);
//                        EntityFlyingItem flyingItem = new EntityFlyingItem(level, blockPos, getBlockPos());
//                        flyingItem.setStack(extracted);
//                        level.addFreshEntity(flyingItem);
//                        setChanged();
//                        return;
//                    }
//                }
//            }
//        }
//    }

    @Override
    protected void saveAdditional(CompoundTag tag, HolderLookup.Provider registries) {
        super.saveAdditional(tag, registries);
    }

    @Override
    protected void loadAdditional(CompoundTag tag, HolderLookup.Provider registries) {
        super.loadAdditional(tag, registries);
    }
}
